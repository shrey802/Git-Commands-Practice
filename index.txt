mkdir foldername
cd foldername
git init in terminal
git add .
git commit -m "commit msg"
git branch -m "branchname" this is used to rename the branch
git remote add origin url adding remote repo to local repo  
git push -u origin main pushing to remote repo on branch main
git clone url
git pull to pull the changes of remote repo to working directory 
git restore --staged filename this command is used to unstage the staged changes of working directory
git status shows staged changes yet to be committed
git log shows commit history


branches :

git checkout -b branchname to create branches and switch to newly created branch
git add .
git commit -m "commit msg"
git push origin branchname
git checkout branchname to switch branches that already exist
git merge branchname merges the changes but we have to push 
git push origin branchname

OPEN PR AND MERGE FROM MAIN TO DEV NOW PUSHING MORE TO DEV THEN MERGING AGAIN 

REBASE :
git rebase branchname basically rebases the branchname onto other branchname by example. git rebase main is to rebase that is add dev branch to main branch
git rebase merges the feature branch onto main branch but doesn't add extra commit that is if main branch has A->B->C->D
                                                                                                                    E->F and we have to merge E & F ahead of D then we can do using rebase
whereas in merge extra commit history of merge
git pull main
git push origin branchname also after rebase command

REVERT :
git revert hash of the commit u want to revert or HEAD means latest commit we'll do HEAD 
git revert -m "Reverting faulty changes" This will open an editor to create a revert commit message. Alternatively, specify a message directly:
git push origin dev

